@props(['menuId', 'companyId' => null])

<!-- Sticky Notes Container -->
<div x-data="stickyNoteManager({{ $menuId }}, {{ $companyId ? $companyId : 'null' }})"
     x-init="init()"
     class="sticky-notes-wrapper">

    <!-- Floating Toggle Button -->
    <button @click="toggleNotesPanel()"
            type="button"
            class="fixed bottom-6 right-6 z-[100] w-14 h-14 bg-gradient-to-br from-yellow-300 to-yellow-500 hover:from-yellow-400 hover:to-yellow-600 text-gray-800 rounded-full shadow-xl flex items-center justify-center transition-all duration-200 hover:scale-110 active:scale-95"
            title="Sticky Notes">
        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z"/>
        </svg>
        <span x-show="notes.length > 0"
              x-cloak
              class="absolute -top-1 -right-1 bg-red-500 text-white text-xs w-5 h-5 rounded-full flex items-center justify-center font-bold shadow-md"
              x-text="notes.length"></span>
    </button>

    <!-- Notes Panel -->
    <div x-show="showPanel"
         x-cloak
         x-transition:enter="transition ease-out duration-200"
         x-transition:enter-start="opacity-0 scale-95"
         x-transition:enter-end="opacity-100 scale-100"
         x-transition:leave="transition ease-in duration-150"
         x-transition:leave-start="opacity-100 scale-100"
         x-transition:leave-end="opacity-0 scale-95"
         @click.away="showPanel = false"
         class="fixed bottom-24 right-6 z-[99] w-80 max-h-96 bg-white dark:bg-gray-800 rounded-xl shadow-2xl border border-gray-200 dark:border-gray-700 overflow-hidden">

        <!-- Panel Header -->
        <div class="p-4 border-b border-gray-200 dark:border-gray-700 flex items-center justify-between bg-gradient-to-r from-gray-50 to-gray-100 dark:from-gray-900 dark:to-gray-800">
            <h3 class="text-sm font-bold text-gray-900 dark:text-white flex items-center gap-2">
                <svg class="w-5 h-5 text-yellow-500" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M13.586 3.586a2 2 0 112.828 2.828l-.793.793-2.828-2.828.793-.793zM11.379 5.793L3 14.172V17h2.828l8.38-8.379-2.83-2.828z"/>
                </svg>
                My Sticky Notes
            </h3>
            <div class="flex items-center gap-1">
                <button type="button" @click="createNote()"
                        class="p-2 text-green-600 dark:text-green-400 hover:bg-green-50 dark:hover:bg-green-900/20 rounded-lg transition">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2.5" d="M12 4v16m8-8H4"/>
                    </svg>
                </button>
                <button type="button" @click="showPanel = false"
                        class="p-2 text-gray-600 dark:text-gray-400 hover:bg-gray-200 dark:hover:bg-gray-700 rounded-lg transition">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"/>
                    </svg>
                </button>
            </div>
        </div>

        <!-- Notes List -->
        <div class="overflow-y-auto max-h-80 p-2">
            <template x-if="notes.length === 0">
                <div class="p-12 text-center">
                    <svg class="w-16 h-16 mx-auto text-gray-300 dark:text-gray-600 mb-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M7 8h10M7 12h4m1 8l-4-4H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-3l-4 4z"/>
                    </svg>
                    <p class="text-sm text-gray-500 dark:text-gray-400">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ Sticky Note</p>
                    <p class="text-xs text-gray-400 dark:text-gray-500 mt-1">‡∏Ñ‡∏•‡∏¥‡∏Å‡∏õ‡∏∏‡πà‡∏° + ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏´‡∏°‡πà</p>
                </div>
            </template>

            <template x-for="note in notes" :key="note.id">
                <div @click="restoreNote(note)"
                     class="mb-2 p-3 rounded-lg border cursor-pointer transition-all duration-200 hover:shadow-md"
                     :class="[
                         note.is_minimized ? 'opacity-60' : 'opacity-100',
                         `border-${note.color}-300 bg-${note.color}-50 dark:bg-${note.color}-900/20 hover:border-${note.color}-400`
                     ]">
                    <div class="flex items-start justify-between gap-2">
                        <div class="flex-1 min-w-0">
                            <p class="text-sm text-gray-900 dark:text-white line-clamp-2"
                               x-text="note.content || '‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤...'"></p>
                            <div class="flex items-center gap-2 mt-2">
                                <span class="text-xs px-2 py-0.5 rounded-full font-medium"
                                      :class="`bg-${note.color}-200 dark:bg-${note.color}-800/50 text-${note.color}-800 dark:text-${note.color}-200`"
                                      x-text="note.color"></span>
                                <span x-show="note.is_pinned" class="text-xs text-yellow-600 dark:text-yellow-400">
                                    üìå Pinned
                                </span>
                            </div>
                        </div>
                        <button type="button" @click.stop="deleteNote(note.id)"
                                class="p-1 text-red-500 hover:bg-red-50 dark:hover:bg-red-900/20 rounded transition flex-shrink-0">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"/>
                            </svg>
                        </button>
                    </div>
                </div>
            </template>
        </div>
    </div>

    <!-- Sticky Notes (Floating) -->
    <template x-for="note in visibleNotes" :key="note.id">
        <div x-show="!note.is_minimized"
             x-cloak
             x-transition
             :id="'note-' + note.id"
             class="sticky-note fixed rounded-xl shadow-2xl overflow-hidden border-2"
             :class="[getNoteColorClass(note.color), `border-${note.color}-400`]"
             :style="`left: ${note.position_x}px; top: ${note.position_y}px; width: ${note.width}px; height: ${note.height}px; z-index: ${note.z_index};`"
             @mousedown="bringToFront(note)">

            <!-- Note Header -->
            <div class="note-header px-3 py-2 flex items-center justify-between bg-gradient-to-r from-black/10 to-black/5 backdrop-blur-sm"
                 :class="note.is_pinned ? 'cursor-default' : 'cursor-move'"
                 @mousedown="startDrag($event, note)">
                <div class="flex items-center gap-2">
                    <!-- Color Picker -->
                    <div class="relative" x-data="{ showColors: false }">
                        <button type="button" @click.stop="showColors = !showColors"
                                class="w-5 h-5 rounded-full border-2 border-white/80 shadow-sm hover:scale-110 transition"
                                :class="`bg-${note.color}-400`"
                                title="‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ"></button>
                        <div x-show="showColors"
                             x-cloak
                             x-transition
                             @click.away="showColors = false"
                             class="absolute top-8 left-0 bg-white dark:bg-gray-800 rounded-lg shadow-xl p-2 flex gap-1.5 z-50 border border-gray-200 dark:border-gray-700">
                            <template x-for="color in ['yellow', 'blue', 'green', 'pink', 'purple', 'orange']" :key="color">
                                <button type="button" @click.stop="changeNoteColor(note, color); showColors = false"
                                        class="w-7 h-7 rounded-full border-2 hover:scale-125 transition-transform"
                                        :class="[`bg-${color}-400`, note.color === color ? 'border-gray-800 dark:border-white ring-2 ring-offset-1 ring-gray-800' : 'border-white']"></button>
                            </template>
                        </div>
                    </div>

                    <!-- Pin Button -->
                    <button type="button" @click.stop="togglePin(note)"
                            :title="note.is_pinned ? 'Unpin' : 'Pin'"
                            class="p-1 hover:bg-white/30 rounded transition"
                            :class="note.is_pinned ? 'text-yellow-900 dark:text-yellow-200' : 'text-gray-600 dark:text-gray-400'">
                        <svg class="w-4 h-4" :class="note.is_pinned ? 'rotate-45' : ''" fill="currentColor" viewBox="0 0 20 20">
                            <path d="M10 2a1 1 0 011 1v1.323l3.954 1.582 1.599-.8a1 1 0 01.894 1.79l-1.233.616 1.738 5.42a1 1 0 01-.285 1.05A3.989 3.989 0 0115 15a3.989 3.989 0 01-2.667-1.019 1 1 0 01-.285-1.05l1.715-5.349L11 6.477V16h2a1 1 0 110 2H7a1 1 0 110-2h2V6.477L6.237 7.582l1.715 5.349a1 1 0 01-.285 1.05A3.989 3.989 0 015 15a3.989 3.989 0 01-2.667-1.019 1 1 0 01-.285-1.05l1.738-5.42-1.233-.617a1 1 0 01.894-1.788l1.599.799L9 4.323V3a1 1 0 011-1z"/>
                        </svg>
                    </button>
                </div>

                <div class="flex items-center gap-1">
                    <!-- Minimize Button -->
                    <button type="button" @click.stop="minimizeNote(note)"
                            title="Minimize"
                            class="p-1 hover:bg-white/30 rounded transition text-gray-600 dark:text-gray-400">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2.5" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M20 12H4"/>
                        </svg>
                    </button>

                    <!-- Close Button -->
                    <button type="button" @click.stop="deleteNote(note.id)"
                            title="‡∏•‡∏ö"
                            class="p-1 hover:bg-red-500/20 rounded transition text-red-600 dark:text-red-400">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"/>
                        </svg>
                    </button>
                </div>
            </div>

            <!-- Note Content -->
            <div class="note-content p-4 overflow-y-auto" :style="`height: calc(100% - 44px);`">
                <textarea
                    x-model="note.content"
                    @input="debounceUpdate(note)"
                    class="w-full h-full bg-transparent border-none outline-none resize-none text-gray-900 dark:text-gray-100 placeholder-gray-400 text-base leading-relaxed"
                    placeholder="‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô note ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà..."
                    style="font-family: 'Segoe UI', 'Tahoma', sans-serif;"></textarea>
            </div>

            <!-- Resize Handle -->
            <div @mousedown.stop="startResize($event, note)"
                 class="absolute bottom-1 right-1 w-5 h-5 cursor-se-resize opacity-50 hover:opacity-100 transition">
                <svg class="w-5 h-5 text-gray-600 dark:text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                    <path d="M17 12h-2v2h2v-2zm0 4h-2v2h2v-2zm-4-4h-2v2h2v-2zm0 4h-2v2h2v-2z"/>
                </svg>
            </div>
        </div>
    </template>
</div>

<style>
[x-cloak] { display: none !important; }

.sticky-note {
    min-width: 220px;
    min-height: 180px;
    max-width: 700px;
    max-height: 700px;
    transition: box-shadow 0.2s ease;
}

.sticky-note:hover {
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.35);
}

.bg-yellow-note {
    background: linear-gradient(135deg, #fef9c3 0%, #fde047 50%, #facc15 100%);
}
.bg-blue-note {
    background: linear-gradient(135deg, #dbeafe 0%, #93c5fd 50%, #60a5fa 100%);
}
.bg-green-note {
    background: linear-gradient(135deg, #d1fae5 0%, #6ee7b7 50%, #34d399 100%);
}
.bg-pink-note {
    background: linear-gradient(135deg, #fce7f3 0%, #f9a8d4 50%, #f472b6 100%);
}
.bg-purple-note {
    background: linear-gradient(135deg, #f3e8ff 0%, #c084fc 50%, #a855f7 100%);
}
.bg-orange-note {
    background: linear-gradient(135deg, #ffedd5 0%, #fdba74 50%, #fb923c 100%);
}

.note-header {
    user-select: none;
}

.note-content textarea::placeholder {
    font-style: italic;
}

.note-content textarea:focus {
    outline: none;
}

/* Line clamp utility for note preview */
.line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
}
</style>

<script>
function stickyNoteManager(menuId, companyId) {
    return {
        menuId: menuId,
        companyId: companyId,
        notes: [],
        showPanel: false,
        draggedNote: null,
        resizedNote: null,
        dragOffset: { x: 0, y: 0 },
        updateTimeout: null,
        maxZIndex: 1000,

        async init() {
            await this.loadNotes();

            // Global mouse move handler
            document.addEventListener('mousemove', (e) => {
                if (this.draggedNote) {
                    this.handleDrag(e);
                }
                if (this.resizedNote) {
                    this.handleResize(e);
                }
            });

            // Global mouse up handler
            document.addEventListener('mouseup', () => {
                if (this.draggedNote) {
                    this.stopDrag();
                }
                if (this.resizedNote) {
                    this.stopResize();
                }
            });
        },

        get visibleNotes() {
            return this.notes.filter(n => !n.is_minimized);
        },

        async loadNotes() {
            try {
                const params = new URLSearchParams({
                    menu_id: this.menuId,
                    company_id: this.companyId || ''
                });

                const response = await fetch(`/api/sticky-notes?${params}`);
                const data = await response.json();

                if (data.success && data.data) {
                    this.notes = Array.isArray(data.data) ? data.data : [];
                    if (this.notes.length > 0) {
                        this.maxZIndex = Math.max(...this.notes.map(n => n.z_index || 1000)) + 1;
                    }
                } else {
                    this.notes = [];
                }
            } catch (error) {
                console.error('Load notes error:', error);
                this.notes = [];
            }
        },

        async createNote() {
            try {
                const response = await fetch('/api/sticky-notes', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content
                    },
                    body: JSON.stringify({
                        menu_id: this.menuId,
                        company_id: this.companyId,
                        content: '',
                        color: 'yellow',
                        position_x: 100 + (this.notes.length * 20),
                        position_y: 100 + (this.notes.length * 20),
                        width: 300,
                        height: 200,
                        is_minimized: false,
                        is_pinned: false,
                        z_index: ++this.maxZIndex
                    })
                });

                const data = await response.json();
                if (data.success) {
                    this.notes.push(data.data);
                    this.showPanel = false;
                }
            } catch (error) {
                console.error('Create note error:', error);
            }
        },

        async updateNote(note) {
            try {
                await fetch(`/api/sticky-notes/${note.id}`, {
                    method: 'PUT',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content
                    },
                    body: JSON.stringify(note)
                });
            } catch (error) {
                console.error('Update note error:', error);
            }
        },

        debounceUpdate(note) {
            clearTimeout(this.updateTimeout);
            this.updateTimeout = setTimeout(() => {
                this.updateNote(note);
            }, 1000);
        },

        async deleteNote(noteId) {
            if (!confirm('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö note ‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) return;

            try {
                const response = await fetch(`/api/sticky-notes/${noteId}`, {
                    method: 'DELETE',
                    headers: {
                        'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').content
                    }
                });

                const data = await response.json();
                if (data.success) {
                    this.notes = this.notes.filter(n => n.id !== noteId);
                }
            } catch (error) {
                console.error('Delete note error:', error);
            }
        },

        toggleNotesPanel() {
            this.showPanel = !this.showPanel;
        },

        getNoteColorClass(color) {
            return `bg-${color}-note`;
        },

        changeNoteColor(note, color) {
            note.color = color;
            this.updateNote(note);
        },

        togglePin(note) {
            note.is_pinned = !note.is_pinned;
            this.updateNote(note);
        },

        minimizeNote(note) {
            note.is_minimized = true;
            this.updateNote(note);
        },

        restoreNote(note) {
            note.is_minimized = false;
            this.bringToFront(note);
            this.updateNote(note);
        },

        bringToFront(note) {
            note.z_index = ++this.maxZIndex;
        },

        startDrag(event, note) {
            if (note.is_pinned) return;

            this.draggedNote = note;
            this.dragOffset = {
                x: event.clientX - note.position_x,
                y: event.clientY - note.position_y
            };
            event.preventDefault();
        },

        handleDrag(event) {
            if (!this.draggedNote) return;

            // Calculate new position with boundary checks
            let newX = event.clientX - this.dragOffset.x;
            let newY = event.clientY - this.dragOffset.y;

            // Keep note within window bounds
            newX = Math.max(0, Math.min(window.innerWidth - this.draggedNote.width, newX));
            newY = Math.max(0, Math.min(window.innerHeight - this.draggedNote.height, newY));

            this.draggedNote.position_x = newX;
            this.draggedNote.position_y = newY;
        },

        stopDrag() {
            if (this.draggedNote) {
                this.updateNote(this.draggedNote);
                this.draggedNote = null;
            }
        },

        startResize(event, note) {
            this.resizedNote = note;
            this.bringToFront(note);
            event.preventDefault();
        },

        handleResize(event) {
            if (!this.resizedNote) return;

            const newWidth = Math.max(220, Math.min(700, event.clientX - this.resizedNote.position_x));
            const newHeight = Math.max(180, Math.min(700, event.clientY - this.resizedNote.position_y));

            this.resizedNote.width = newWidth;
            this.resizedNote.height = newHeight;
        },

        stopResize() {
            if (this.resizedNote) {
                this.updateNote(this.resizedNote);
                this.resizedNote = null;
            }
        }
    }
}
</script>
