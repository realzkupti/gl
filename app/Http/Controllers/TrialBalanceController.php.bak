<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Models\TrialBalance;

class TrialBalanceController extends Controller
{
    public function index(Request $request)
    {
        $periodKey = $request->input('period', null);

        if (!$periodKey) {
            // Default to current month if no period selected
            $currentMonth = now()->format('Y-m');
            $periods = TrialBalance::getGLPeriods();
            foreach ($periods as $period) {
                if (substr($period->GLP_ST_DATE, 0, 7) === $currentMonth) {
                    $periodKey = $period->GLP_KEY;
                    break;
                }
            }
            if (!$periodKey && $periods) {
                $periodKey = $periods[0]->GLP_KEY; // fallback to first period
            }
        }

        $period = TrialBalance::getPeriodByKey($periodKey);

        if (!$period) {
            return view('trial_balance_plain', [
                'rows' => [],
                'periods' => TrialBalance::getGLPeriods(),
                'selectedPeriod' => null,
                'error' => 'Invalid period selected'
            ]);
        }

        $movementRows = TrialBalance::getMovementBalancesForPeriod($periodKey);
        $openingRows = TrialBalance::getOpeningBalancesForPeriod($periodKey);

        $rows = TrialBalance::processTrialBalanceData($movementRows, $openingRows);

        return view('trial_balance_plain', [
            'rows' => $rows,
            'periods' => TrialBalance::getGLPeriods(),
            'selectedPeriod' => $period,
        ]);
    }

    // Return JSON detail rows for a given account and period
    public function detail(Request $request)
    {
        $account = $request->query('account');
        $periodKey = $request->query('period');

        // Accept account code "0"; only reject when truly missing
        if ($account === null || $account === '' || $periodKey === null || $periodKey === '') {
            return response()->json(['data' => []]);
        }

        $period = TrialBalance::getPeriodByKey($periodKey);
        if (!$period) {
            return response()->json(['data' => []]);
        }

        // For detail, show transactions within the selected period
        $dateS = $period->GLP_ST_DATE;
        $dateE = $period->GLP_EN_DATE;

        $rows = TrialBalance::getAccountDetails($account, $dateS, $dateE);

        return response()->json(['data' => $rows]);
    }

    // Return accounting entries (postings) for a given document DI_KEY
    public function entries(Request $request)
    {
        $docKey = $request->query('doc_key');
        if (! $docKey) {
            return response()->json(['data' => []]);
        }

        $rows = TrialBalance::getDocumentEntries($docKey);

        return response()->json(['data' => $rows]);
    }
}
